@page "/product"

<h1>Product Data</h1>
<p>This component demonstrates CRUD operation on Product data</p>

<div class="row">
    <div class="col-md-4">
        <a href='/product/add' class="btn btn-primary" role="button"><i class="fa fa-user-plus"></i> Add Product</a>
    </div>
    <div class="input-group col-md-4 offset-md-4">
        <input type="text" class="form-control" placeholder="Search product by name" @bind="SearchString" @bind:event="oninput" @onkeyup="FilterEmp" />
        <div class="input-group-append">
            <button class="btn btn-info" @onclick="FilterEmp">
                <i class="fa fa-search"></i>
            </button>
        </div>
    </div>
</div>
<br />
@if (productList == null)
{
<p><em>Loading...</em></p> }
else
{
<table class='table'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Unit Price</th>
            <th>Stock</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var pro in productList)
        {
<tr>
    <td>@pro.ProductName</td>
    <td>@pro.Description</td>
    <td>@pro.ProductPrice</td>
    <td>@pro.AvailableStock</td>
    <td>
        <a href='/product/edit/@pro.ProductId' class="btn btn-outline-dark" role="button">Edit</a>
        <button class="btn btn-danger" data-toggle="modal" data-target="#deleteEmpModal" @onclick="(() => DeleteConfirm(pro.ProductId))">Delete</button>
    </td>
</tr>}
    </tbody>
</table>

                <div class="modal fade" id="deleteEmpModal">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Delete Product</h3>
                            </div>
                            <div class="modal-body">
                                <h4>Do you want to delete this product ??</h4>
                                <table class="table">
                                    <tr>
                                        <td>Name</td>
                                        <td>@product.ProductName</td>
                                    </tr>
                                    <tr>
                                        <td>Description</td>
                                        <td>@product.Description</td>
                                    </tr>
                                    <tr>
                                        <td>Price</td>
                                        <td>@product.ProductPrice</td>
                                    </tr>
                                    <tr>
                                        <td>Stock</td>
                                        <td>@product.AvailableStock</td>
                                    </tr>
                                </table>
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-danger" @onclick="(async () => await DeleteProduct(product.ProductId))" data-dismiss="modal">YES</button>
                                <button class="btn btn-warning" data-dismiss="modal">No</button>
                            </div>
                        </div>
                    </div>
                </div>}

@code
{ [Inject]
    protected ProductService ProductService { get; set; }
    protected List<Product> productList = new List<Product>();
    protected List<Product> searchProData = new List<Product>();
    protected Product product = new Product();
    protected string SearchString { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await GetProduct();
    }

    protected async Task GetProduct()
    {
        productList = await ProductService.GetProductList();
        searchProData = productList;
    }

    protected void FilterEmp()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            productList = searchProData.Where(x => x.ProductName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            productList = searchProData;
        }
    }

    protected void DeleteConfirm(Guid empID)
    {
        product = productList.FirstOrDefault(x => x.ProductId == empID);
    }

    protected async Task DeleteProduct(Guid empID)
    {
        await Task.Run(() =>
        {
            ProductService.Delete(empID);
        });
        await GetProduct();
    } }